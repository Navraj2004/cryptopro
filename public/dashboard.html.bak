<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CryptoPro Dashboard</title>
    <!-- Modern fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <!-- Font Awesome for icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- AOS Animation Library -->
    <link href="https://unpkg.com/aos@2.3.1/dist/aos.css" rel="stylesheet">
    <style>
        :root {
            --primary-color: #3a7bd5;
            --secondary-color: #00d2ff;
            --accent-color: #00f2fe;
            --dark-color: #0f172a;
            --light-color: #f8fafc;
            --success-color: #10b981;
            --warning-color: #f59e0b;
            --danger-color: #ef4444;
            --card-bg: rgba(30, 41, 59, 0.8);
            --card-border: rgba(255, 255, 255, 0.1);
        }
        
        body {
            margin: 0;
            font-family: 'Poppins', sans-serif;
            background-color: #0f172a;
            background-image: 
                radial-gradient(circle at 25% 25%, rgba(58, 123, 213, 0.05) 0%, transparent 50%),
                radial-gradient(circle at 75% 75%, rgba(0, 210, 255, 0.05) 0%, transparent 50%);
            color: var(--light-color);
            overflow-x: hidden;
            min-height: 100vh;
        }
        
        header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 1.2rem 2rem;
            background: rgba(15, 23, 42, 0.9);
            backdrop-filter: blur(10px);
            border-bottom: 1px solid rgba(255, 255, 255, 0.05);
            color: white;
            position: sticky;
            top: 0;
            z-index: 1000;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);
            animation: slideDown 0.8s ease-out;
        }
        
        .header-logo {
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }
        
        .header-logo i {
            font-size: 1.8rem;
            background: linear-gradient(to right, var(--primary-color), var(--secondary-color));
            -webkit-background-clip: text;
            background-clip: text;
            -webkit-text-fill-color: transparent;
        }
        
        header h1 {
            font-size: 1.5rem;
            font-weight: 600;
            margin: 0;
            background: linear-gradient(to right, var(--primary-color), var(--secondary-color));
            -webkit-background-clip: text;
            background-clip: text;
            -webkit-text-fill-color: transparent;
        }
        
        .user-welcome {
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }
        
        .user-welcome i {
            color: var(--secondary-color);
        }
        
        header p {
            margin: 0;
            font-size: 0.95rem;
            opacity: 0.9;
        }
        
        .header-actions {
            display: flex;
            gap: 0.75rem;
        }
        
        .btn {
            padding: 0.6rem 1.2rem;
            border-radius: 8px;
            font-weight: 500;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }
        
        .btn:hover {
            transform: translateY(-3px);
        }
        
        .btn-primary {
            background: linear-gradient(to right, var(--primary-color), var(--secondary-color));
            border: none;
            box-shadow: 0 4px 10px rgba(0, 210, 255, 0.3);
        }
        
        .btn-primary:hover {
            box-shadow: 0 6px 15px rgba(0, 210, 255, 0.4);
        }
        
        .btn-danger {
            background: linear-gradient(to right, #e11d48, #f43f5e);
            border: none;
            box-shadow: 0 4px 10px rgba(225, 29, 72, 0.3);
        }
        
        .btn-danger:hover {
            box-shadow: 0 6px 15px rgba(225, 29, 72, 0.4);
        }
        
        .crypto-container {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 30px;
            padding: 2rem;
            animation: fadeIn 1.5s;
            max-width: 1400px;
            margin: 0 auto;
        }

        .crypto-card {
            position: relative;
            height: 280px;
            background-size: cover;
            background-position: center;
            border-radius: 16px;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
            color: white;
            display: flex;
            flex-direction: column;
            justify-content: flex-end;
            padding: 1.5rem;
            overflow: hidden;
            transition: all 0.5s ease;
            border: 1px solid var(--card-border);
        }
        
        .crypto-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: linear-gradient(to bottom, 
                rgba(15, 23, 42, 0.2) 0%, 
                rgba(15, 23, 42, 0.7) 50%,
                rgba(15, 23, 42, 0.9) 100%);
            z-index: 1;
        }
        
        .crypto-card:hover {
            transform: translateY(-10px);
            box-shadow: 0 15px 30px rgba(0, 0, 0, 0.3);
        }
        
        .crypto-card-content {
            position: relative;
            z-index: 2;
        }
        
        .crypto-logo {
            position: absolute;
            top: 1.5rem;
            left: 1.5rem;
            width: 50px;
            height: 50px;
            border-radius: 50%;
            background-color: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(5px);
            display: flex;
            align-items: center;
            justify-content: center;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
            z-index: 2;
        }
        
        .crypto-logo i {
            font-size: 1.5rem;
            color: var(--secondary-color);
        }
        
        .crypto-card h3 {
            margin: 0 0 0.5rem 0;
            font-size: 1.8rem;
            font-weight: 600;
        }
        
        .crypto-price {
            display: flex;
            align-items: center;
            margin-bottom: 1rem;
            font-size: 1.1rem;
            color: rgba(255, 255, 255, 0.9);
        }
        
        .crypto-price-value {
            font-weight: 600;
            margin-right: 0.5rem;
        }
        
        .crypto-price-change {
            font-size: 0.9rem;
            padding: 0.2rem 0.5rem;
            border-radius: 4px;
            background-color: rgba(16, 185, 129, 0.2);
            color: #10b981;
        }
        
        .crypto-price-change.negative {
            background-color: rgba(239, 68, 68, 0.2);
            color: #ef4444;
        }
        
        .crypto-actions {
            display: flex;
            gap: 0.75rem;
            margin-top: 0.5rem;
        }
        
        .crypto-card a {
            padding: 0.7rem 1.2rem;
            border: none;
            border-radius: 8px;
            font-size: 0.95rem;
            font-weight: 500;
            text-decoration: none;
            display: inline-block;
            text-align: center;
            transition: all 0.3s ease;
            flex: 1;
            z-index: 2;
        }
        
        .crypto-card .buy-button {
            background: linear-gradient(to right, var(--primary-color), var(--secondary-color));
            color: white;
            box-shadow: 0 4px 10px rgba(0, 210, 255, 0.3);
        }

        .crypto-card .sell-button {
            background: linear-gradient(to right, #e11d48, #f43f5e);
            color: white;
            box-shadow: 0 4px 10px rgba(225, 29, 72, 0.3);
        }
        
        .crypto-card .buy-button:hover {
            transform: translateY(-3px);
            box-shadow: 0 6px 15px rgba(0, 210, 255, 0.4);
        }
        
        .crypto-card .sell-button:hover {
            transform: translateY(-3px);
            box-shadow: 0 6px 15px rgba(225, 29, 72, 0.4);
        }
        
        .wallet-modal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(15, 23, 42, 0.85); /* Darker background for emphasis */
            display: none;
            justify-content: center;
            align-items: center;
            z-index: 2000;
            overflow-y: auto;
            padding: 2rem 0;
        }
        
        .wallet-content {
            background-color: var(--dark-color);
            border-radius: 16px;
            width: 90%;
            max-width: 700px;
            border: 1px solid rgba(255, 255, 255, 0.1);
            box-shadow: 0 25px 50px rgba(0, 0, 0, 0.3);
            overflow: hidden;
        }
        
        .wallet-header {
            background: linear-gradient(to right, var(--primary-color), var(--secondary-color));
            padding: 1.5rem;
            color: white;
        }
        
        .wallet-header h3 {
            margin: 0;
            font-weight: 600;
            background: linear-gradient(to right, rgba(255, 255, 255, 0.9), rgba(255, 255, 255, 1));
            -webkit-background-clip: text;
            background-clip: text;
            -webkit-text-fill-color: transparent;
            display: inline-block;
        }
        
        .wallet-balance-summary {
            background: rgba(30, 41, 59, 0.5);
            padding: 1.5rem;
            border-radius: 12px;
            margin: 1.5rem;
            border: 1px solid rgba(255, 255, 255, 0.05);
        }
        
        .bg-gradient-primary {
            background: linear-gradient(to right, var(--primary-color), var(--secondary-color));
        }
        
        .wallet-tabs .nav-pills .nav-link {
            color: var(--light-color);
            background-color: rgba(255, 255, 255, 0.05);
            border-radius: 8px;
            margin: 0 5px;
            transition: all 0.3s ease;
        }
        
        .wallet-tabs .nav-pills .nav-link.active {
            background: linear-gradient(to right, var(--primary-color), var(--secondary-color));
            color: white;
            box-shadow: 0 4px 15px rgba(0, 210, 255, 0.3);
        }
        
        .transaction-item {
            padding: 1rem;
            border-bottom: 1px solid rgba(255, 255, 255, 0.05);
        }
        
        .transaction-icon {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-right: 1rem;
        }
        
        .transaction-icon.buy {
            background-color: rgba(16, 185, 129, 0.2);
            color: #10b981;
        }
        
        .transaction-icon.sell {
            background-color: rgba(239, 68, 68, 0.2);
            color: #ef4444;
        }
        
        .wallet-header .close-icon {
            font-size: 1.2rem;
            color: rgba(255, 255, 255, 0.7);
            cursor: pointer;
            transition: all 0.3s ease;
        }
        
        .wallet-header .close-icon:hover {
            color: var(--secondary-color);
            transform: rotate(90deg);
        }
        
        .table {
            color: var(--light-color);
        }
        
        .table th {
            font-weight: 600;
            color: rgba(255, 255, 255, 0.7);
            border-color: rgba(255, 255, 255, 0.1);
            padding: 1rem 0.75rem;
        }
        
        .table td {
            padding: 1rem 0.75rem;
            border-color: rgba(255, 255, 255, 0.05);
            vertical-align: middle;
        }
        
        .table tbody tr {
            transition: all 0.3s ease;
        }
        
        .table tbody tr:hover {
            background-color: rgba(255, 255, 255, 0.05);
        }
        
        .coin-cell {
            display: flex;
            align-items: center;
            gap: 0.75rem;
        }
        
        .coin-icon {
            width: 32px;
            height: 32px;
            border-radius: 50%;
            background-color: rgba(255, 255, 255, 0.1);
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        .coin-icon i {
            font-size: 1rem;
            color: var(--secondary-color);
        }
        
        #closeWalletButton {
            background: transparent;
            color: var(--light-color);
            border: 1px solid rgba(255, 255, 255, 0.2);
            padding: 0.7rem 1.5rem;
            border-radius: 8px;
            font-weight: 500;
            transition: all 0.3s ease;
        }
        
        #closeWalletButton:hover {
            background-color: rgba(255, 255, 255, 0.1);
            border-color: rgba(255, 255, 255, 0.3);
        }


        .footer {
            position: relative;
            bottom: 0;
            width: 100%;
            font-size: 0.9rem;
            box-shadow: 0 -2px 4px rgba(0, 0, 0, 0.1);
            animation: fadeIn 1.5s;
        }

        .modal-content {
            background: rgba(30, 41, 59, 0.95);
            border-radius: 16px;
            border: 1px solid rgba(255, 255, 255, 0.1);
            box-shadow: 0 15px 35px rgba(0, 0, 0, 0.2);
            backdrop-filter: blur(10px);
            color: var(--light-color);
        }
        
        .modal-header {
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
            padding: 1.5rem;
        }
        
        .modal-body {
            padding: 1.5rem;
        }
        
        .modal-footer {
            border-top: 1px solid rgba(255, 255, 255, 0.1);
            padding: 1rem 1.5rem;
        }

        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }
        
        @keyframes slideDown {
            from { transform: translateY(-50px); }
            to { transform: translateY(0); }
        }
        
        @keyframes floatUp {
            0% { transform: translateY(0); }
            50% { transform: translateY(-10px); }
            100% { transform: translateY(0); }
        }
        
        @media (max-width: 768px) {
            header {
                padding: 1rem;
                flex-direction: column;
                gap: 1rem;
                text-align: center;
            }
            
            .header-actions {
                width: 100%;
                justify-content: center;
            }
            
            .crypto-container {
                grid-template-columns: 1fr;
                padding: 1rem;
            }
        }
    </style>
</head>
<body>
    <header data-aos="fade-down" data-aos-duration="800">
        <div class="header-logo">
            <i class="fas fa-coins"></i>
            <h1 class="mb-0">CryptoPro</h1>
        </div>
        <div class="user-welcome">
            <i class="fas fa-user-circle"></i>
            <p class="mb-0">Welcome, <span id="userName">User</span></p>
        </div>
        <div class="header-actions">
            <button id="walletButton" class="btn btn-primary">
                <i class="fas fa-wallet"></i>
                <span>My Wallet</span>
            </button>
            <button id="logoutButton" class="btn btn-danger">
                <i class="fas fa-sign-out-alt"></i>
                <span>Logout</span>
            </button>
        </div>
    </header>

    <div class="crypto-container">
        <!-- Cryptocurrency cards -->
        <div class="crypto-card" style="background-image: url('images/bitcoin.png');" data-aos="fade-up" data-aos-delay="100">
            <div class="crypto-logo">
                <i class="fab fa-bitcoin"></i>
            </div>
            <div class="crypto-card-content">
                <h3>Bitcoin (BTC)</h3>
                <div class="crypto-price">
                    <span class="crypto-price-value">$43,256.78</span>
                    <span class="crypto-price-change">+3.2%</span>
                </div>
                <div class="crypto-actions">
                    <a href="buy.html?coin=Bitcoin&price=43256.78" class="buy-button">
                        <i class="fas fa-shopping-cart me-1"></i> Buy
                    </a>
                    <a href="sell.html?coin=Bitcoin" class="sell-button">
                        <i class="fas fa-exchange-alt me-1"></i> Sell
                    </a>
                </div>
            </div>
        </div>

        <div class="crypto-card" style="background-image: url('images/ethereum.png');" data-aos="fade-up" data-aos-delay="200">
            <div class="crypto-logo">
                <i class="fab fa-ethereum"></i>
            </div>
            <div class="crypto-card-content">
                <h3>Ethereum (ETH)</h3>
                <div class="crypto-price">
                    <span class="crypto-price-value">$3,128.45</span>
                    <span class="crypto-price-change">+2.1%</span>
                </div>
                <div class="crypto-actions">
                    <a href="buy.html?coin=Ethereum&price=3128.45" class="buy-button">
                        <i class="fas fa-shopping-cart me-1"></i> Buy
                    </a>
                    <a href="sell.html?coin=Ethereum" class="sell-button">
                        <i class="fas fa-exchange-alt me-1"></i> Sell
                    </a>
                </div>
            </div>
        </div>

        <div class="crypto-card" style="background-image: url('images/cardano.png');" data-aos="fade-up" data-aos-delay="300">
            <div class="crypto-logo">
                <i class="fas fa-coins"></i>
            </div>
            <div class="crypto-card-content">
                <h3>Cardano (ADA)</h3>
                <div class="crypto-price">
                    <span class="crypto-price-value">$0.45</span>
                    <span class="crypto-price-change negative">-1.2%</span>
                </div>
                <div class="crypto-actions">
                    <a href="buy.html?coin=Cardano&price=0.45" class="buy-button">
                        <i class="fas fa-shopping-cart me-1"></i> Buy
                    </a>
                    <a href="sell.html?coin=Cardano" class="sell-button">
                        <i class="fas fa-exchange-alt me-1"></i> Sell
                    </a>
                </div>
            </div>
        </div>

        <div class="crypto-card" style="background-image: url('images/litecoin.png');" data-aos="fade-up" data-aos-delay="400">
            <div class="crypto-logo">
                <i class="fab fa-litecoin-sign"></i>
            </div>
            <div class="crypto-card-content">
                <h3>Litecoin (LTC)</h3>
                <div class="crypto-price">
                    <span class="crypto-price-value">$87.32</span>
                    <span class="crypto-price-change">+0.8%</span>
                </div>
                <div class="crypto-actions">
                    <a href="buy.html?coin=Litecoin&price=87.32" class="buy-button">
                        <i class="fas fa-shopping-cart me-1"></i> Buy
                    </a>
                    <a href="sell.html?coin=Litecoin" class="sell-button">
                        <i class="fas fa-exchange-alt me-1"></i> Sell
                    </a>
                </div>
            </div>
        </div>
        <div class="crypto-card" style="background-image: url('images/polkadot.png');" data-aos="fade-up" data-aos-delay="500">
            <div class="crypto-logo">
                <i class="fas fa-dot-circle"></i>
            </div>
            <div class="crypto-card-content">
                <h3>Polkadot (DOT)</h3>
                <div class="crypto-price">
                    <span class="crypto-price-value">$6.78</span>
                    <span class="crypto-price-change">+2.4%</span>
                </div>
                <div class="crypto-actions">
                    <a href="buy.html?coin=Polkadot&price=6.78" class="buy-button">
                        <i class="fas fa-shopping-cart me-1"></i> Buy
                    </a>
                    <a href="sell.html?coin=Polkadot" class="sell-button">
                        <i class="fas fa-exchange-alt me-1"></i> Sell
                    </a>
                </div>
            </div>
        </div>

        <div class="crypto-card" style="background-image: url('images/dogecoin.png');" data-aos="fade-up" data-aos-delay="600">
            <div class="crypto-logo">
                <i class="fas fa-dog"></i>
            </div>
            <div class="crypto-card-content">
                <h3>Dogecoin (DOGE)</h3>
                <div class="crypto-price">
                    <span class="crypto-price-value">$0.12</span>
                    <span class="crypto-price-change">+5.6%</span>
                </div>
                <div class="crypto-actions">
                    <a href="buy.html?coin=Dogecoin&price=0.12" class="buy-button">
                        <i class="fas fa-shopping-cart me-1"></i> Buy
                    </a>
                    <a href="sell.html?coin=Dogecoin" class="sell-button">
                        <i class="fas fa-exchange-alt me-1"></i> Sell
                    </a>
                </div>
            </div>
        </div>

        <div class="crypto-card" style="background-image: url('images/ripple.png');" data-aos="fade-up" data-aos-delay="700">
            <div class="crypto-logo">
                <i class="fas fa-wave-square"></i>
            </div>
            <div class="crypto-card-content">
                <h3>Ripple (XRP)</h3>
                <div class="crypto-price">
                    <span class="crypto-price-value">$0.62</span>
                    <span class="crypto-price-change">+1.5%</span>
                </div>
                <div class="crypto-actions">
                    <a href="buy.html?coin=Ripple&price=0.62" class="buy-button">
                        <i class="fas fa-shopping-cart me-1"></i> Buy
                    </a>
                    <a href="sell.html?coin=Ripple" class="sell-button">
                        <i class="fas fa-exchange-alt me-1"></i> Sell
                    </a>
                </div>
            </div>
        </div>
        
        <div class="crypto-card" style="background-image: url('images/solana.png');" data-aos="fade-up" data-aos-delay="800">
            <div class="crypto-logo">
                <i class="fas fa-sun"></i>
            </div>
            <div class="crypto-card-content">
                <h3>Solana (SOL)</h3>
                <div class="crypto-price">
                    <span class="crypto-price-value">$104.28</span>
                    <span class="crypto-price-change">+3.8%</span>
                </div>
                <div class="crypto-actions">
                    <a href="buy.html?coin=Solana&price=104.28" class="buy-button">
                        <i class="fas fa-shopping-cart me-1"></i> Buy
                    </a>
                    <a href="sell.html?coin=Solana" class="sell-button">
                        <i class="fas fa-exchange-alt me-1"></i> Sell
                    </a>
                </div>
            </div>
        </div>
    </div>

    <!-- Professional Wallet Modal -->
    <div id="walletModal" class="wallet-modal">
        <div class="wallet-content" data-aos="zoom-in" data-aos-duration="500">
            <div class="wallet-header d-flex justify-content-between align-items-center">
                <h3><i class="fas fa-wallet me-2"></i>Professional Wallet</h3>
                <div class="close-icon" id="closeWallet">
                    <i class="fas fa-times"></i>
                </div>
            </div>
            <div class="wallet-balance-summary mb-4">
                <div class="d-flex justify-content-between align-items-center mb-3">
                    <h4 class="mb-0">Total Balance</h4>
                    <h3 class="mb-0 fw-bold" id="walletTotalBalance">$0.00</h3>
                </div>
                <div class="progress" style="height: 8px;">
                    <div class="progress-bar bg-gradient-primary" role="progressbar" style="width: 75%" aria-valuenow="75" aria-valuemin="0" aria-valuemax="100"></div>
                </div>
                <div class="d-flex justify-content-between mt-2">
                    <small class="text-muted">Portfolio Growth</small>
                    <small class="text-success">+24.5% this month</small>
                </div>
            </div>
            <div class="wallet-tabs mb-3">
                <ul class="nav nav-pills nav-fill mb-3" id="walletTabs" role="tablist">
                    <li class="nav-item" role="presentation">
                        <button class="nav-link active" id="holdings-tab" data-bs-toggle="pill" data-bs-target="#holdings" type="button" role="tab" aria-controls="holdings" aria-selected="true">
                            <i class="fas fa-coins me-2"></i>Holdings
                        </button>
                    </li>
                    <li class="nav-item" role="presentation">
                        <button class="nav-link" id="transactions-tab" data-bs-toggle="pill" data-bs-target="#transactions" type="button" role="tab" aria-controls="transactions" aria-selected="false">
                            <i class="fas fa-exchange-alt me-2"></i>Transactions
                        </button>
                    </li>
                </ul>
            </div>
            <div class="tab-content" id="walletTabContent">
                <div class="tab-pane fade show active" id="holdings" role="tabpanel" aria-labelledby="holdings-tab">
                    <table class="table table-hover align-middle">
                        <thead>
                            <tr>
                                <th>Asset</th>
                                <th>Quantity</th>
                                <th>Value</th>
                                <th>Change</th>
                            </tr>
                        </thead>
                        <tbody id="walletTableBody">
                            <!-- Wallet data will be inserted here -->
                        </tbody>
                    </table>
                </div>
                <div class="tab-pane fade" id="transactions" role="tabpanel" aria-labelledby="transactions-tab">
                    <div class="transaction-history" id="transactionHistory">
                        <!-- Transaction history will be loaded dynamically -->
                    </div>
                </div>
            </div>
            <div class="d-flex justify-content-between mt-4">
                <button class="btn btn-outline-primary px-4 py-2" id="exportWalletButton">
                    <i class="fas fa-file-export me-2"></i>Export Data
                </button>
                <button class="btn btn-primary px-4 py-2" id="closeWalletButton">
                    <i class="fas fa-check-circle me-2"></i>Done
                </button>
            </div>
        </div>
    </div>

    <!-- Logout Confirmation Modal -->
    <div class="modal fade" id="confirmLogoutModal" tabindex="-1">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title"><i class="fas fa-sign-out-alt me-2"></i>Confirm Logout</h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body text-center">
                    <div class="mb-4">
                        <i class="fas fa-question-circle fa-3x text-warning"></i>
                    </div>
                    <p class="mb-0">Are you sure you want to logout from your account?</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-outline-light" data-bs-dismiss="modal">
                        <i class="fas fa-times me-2"></i>Cancel
                    </button>
                    <button type="button" class="btn btn-danger" id="confirmLogoutButton">
                        <i class="fas fa-sign-out-alt me-2"></i>Logout
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Logout Success Modal -->
    <div class="modal fade" id="logoutModal" tabindex="-1">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title"><i class="fas fa-check-circle me-2"></i>Logout Successful</h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body text-center">
                    <div class="success-icon mb-4">
                        <i class="fas fa-check-circle fa-4x text-success"></i>
                    </div>
                    <p>You have been successfully logged out.</p>
                    <div class="d-flex justify-content-center align-items-center mt-3">
                        <div class="spinner-border text-info me-2" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        <p class="mb-0">Redirecting to login page...</p>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <footer class="footer mt-auto py-3 bg-dark text-white">
        <div class="container text-center">
            <span>&copy; 2025 CryptoPro. All rights reserved.</span>
        </div>
    </footer>

    <!-- Bootstrap JS Bundle with Popper -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://unpkg.com/aos@2.3.1/dist/aos.js"></script>
    <script src="js/database.js"></script>
    <script>
    // Global variables for cryptocurrency data
    let cryptoPrices = {};
    let currentUser = null;
    
    // Function to redirect to login page
    function redirectToLogin() {
        window.location.href = "login.html";
    }

    // Function to handle logout
    function logout() {
        localStorage.removeItem("token"); 
        const logoutModal = new bootstrap.Modal(document.getElementById("logoutModal"));
        logoutModal.show();
        setTimeout(redirectToLogin, 2000);
    }
    
    async function fetchUserDetails() {
        const token = localStorage.getItem("token");
        if (!token) {
            alert("Please log in to access the dashboard.");
            window.location.href = "login.html";
            return;
        }

        try {
            // Get current user from database
            const users = Database.users.getAll();
            currentUser = users.find(user => user.email === token);
            
            if (!currentUser) {
                // If user not found in database, create a default user
                currentUser = {
                    id: Date.now().toString(),
                    name: "User",
                    email: token,
                    createdAt: new Date().toISOString(),
                    status: "Verified"
                };
                Database.users.add(currentUser);
            }
            
            // Display user email in welcome message
            document.getElementById("userEmail").textContent = currentUser.email;
            
            // Fetch cryptocurrency prices
            await fetchCryptoPrices();
        } catch (error) {
            console.error("Error fetching user details:", error);
            alert("An error occurred while fetching your details. Please try again later.");
        }
    }

    // Fetch real-time cryptocurrency prices
    async function fetchCryptoPrices() {
        try {
            const response = await fetch('https://api.coingecko.com/api/v3/simple/price?ids=bitcoin,ethereum,ripple,litecoin,cardano,polkadot,solana&vs_currencies=usd&include_24hr_change=true');
            const data = await response.json();
            
            // Store prices in global variable
            cryptoPrices.Bitcoin = { price: data.bitcoin.usd, change: data.bitcoin.usd_24h_change };
            cryptoPrices.Ethereum = { price: data.ethereum.usd, change: data.ethereum.usd_24h_change };
            cryptoPrices.Ripple = { price: data.ripple.usd, change: data.ripple.usd_24h_change };
            cryptoPrices.Litecoin = { price: data.litecoin.usd, change: data.litecoin.usd_24h_change };
            cryptoPrices.Cardano = { price: data.cardano.usd, change: data.cardano.usd_24h_change };
            cryptoPrices.Polkadot = { price: data.polkadot.usd, change: data.polkadot.usd_24h_change };
            cryptoPrices.Solana = { price: data.solana.usd, change: data.solana.usd_24h_change };
            
            // Update cryptocurrency cards with real-time prices
            updateCryptoCards();
        } catch (error) {
            console.error('Error fetching cryptocurrency prices:', error);
            // Use fallback prices if API fails
            cryptoPrices.Bitcoin = { price: 38245.67, change: 2.5 };
            cryptoPrices.Ethereum = { price: 2567.89, change: 1.8 };
            cryptoPrices.Ripple = { price: 0.5678, change: -0.9 };
            cryptoPrices.Litecoin = { price: 145.67, change: 0.7 };
            cryptoPrices.Cardano = { price: 1.23, change: 3.2 };
            cryptoPrices.Polkadot = { price: 18.45, change: -1.5 };
            cryptoPrices.Solana = { price: 98.76, change: 4.3 };
            updateCryptoCards();
        }
    }

    // Function to update cryptocurrency cards with real-time prices
    function updateCryptoCards() {
        const cryptoCards = document.querySelectorAll('.crypto-card');
        
        cryptoCards.forEach(card => {
            const cryptoName = card.getAttribute('data-crypto');
            const priceElement = card.querySelector('.crypto-price');
            const changeElement = card.querySelector('.crypto-price-change');
            
            if (cryptoPrices[cryptoName]) {
                const price = cryptoPrices[cryptoName].price;
                const change = cryptoPrices[cryptoName].change;
                
                // Update price
                priceElement.textContent = `$${price.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`;
                
                // Update price change
                changeElement.textContent = `${change >= 0 ? '+' : ''}${change.toFixed(2)}%`;
                changeElement.classList.remove('positive', 'negative');
                changeElement.classList.add(change >= 0 ? 'positive' : 'negative');
            }
        });
    }
    
    async function fetchWallet() {
        if (!currentUser) {
            alert("Please log in to view your wallet.");
            window.location.href = "login.html";
            return;
        }
        
        try {
            const walletTableBody = document.getElementById('walletTableBody');
            const transactionHistory = document.getElementById('transactionHistory');
            
            // Clear existing data
            walletTableBody.innerHTML = '';
            transactionHistory.innerHTML = '';
            
            // Get user's wallet from localStorage
            const wallets = JSON.parse(localStorage.getItem('wallets') || '{}');
            const userWallet = wallets[currentUser.id] || { balance: 10000, holdings: {} };
            
            // Calculate total wallet value
            let totalValue = userWallet.balance;
            const holdings = [];
            
            // Convert holdings object to array and calculate values
            for (const symbol in userWallet.holdings) {
                const holding = userWallet.holdings[symbol];
                const currentPrice = cryptoPrices[holding.name]?.price || holding.currentPrice || 0;
                const value = holding.quantity * currentPrice;
                totalValue += value;
                
                if (holding.quantity > 0) {
                    holdings.push({
                        coin: holding.name,
                        symbol: symbol,
                        quantity: holding.quantity,
                        value: value,
                        price: currentPrice
                    });
                }
            }
            
            // Update wallet total value
            document.getElementById('walletTotalValue').textContent = `$${totalValue.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`;
            
            // Update available balance
            document.getElementById('availableBalance').textContent = `$${userWallet.balance.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`;
            
            // Add wallet data to table
            if (holdings.length === 0) {
                walletTableBody.innerHTML = `<tr><td colspan="4" class="text-center">No cryptocurrencies in your wallet yet. Start by buying some!</td></tr>`;
            } else {
                holdings.forEach(item => {
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td>
                            <div class="coin-cell">
                                <div class="coin-icon">
                                    <i class="fab fa-${item.symbol.toLowerCase()}"></i>
                                </div>
                                <div>
                                    <h6 class="mb-0">${item.coin}</h6>
                                    <small class="text-muted">${item.symbol}</small>
                                </div>
                            </div>
                        </td>
                        <td class="text-center">${item.quantity}</td>
                        <td class="text-end">$${item.value.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</td>
                        <td class="text-center">
                            <a href="buy.html?coin=${item.coin}" class="action-link buy">Buy</a>
                            <a href="sell.html?coin=${item.coin}&available=${item.quantity}" class="action-link sell">Sell</a>
                        </td>
                    `;
                    walletTableBody.appendChild(row);
                });
            }
            // Get user's transactions
            const allTransactions = Database.transactions.getAll();
            const userTransactions = allTransactions.filter(tx => tx.userId === currentUser.id);
            
            // Sort transactions by date (newest first)
            userTransactions.sort((a, b) => new Date(b.date) - new Date(a.date));
            
            // Add transaction data to history
            if (userTransactions.length === 0) {
                transactionHistory.innerHTML = `<div class="text-center p-3">No transactions yet.</div>`;
            } else {
                userTransactions.forEach(tx => {
                    const transactionItem = document.createElement('div');
                    transactionItem.className = 'transaction-item';
                    
                    const isBuy = tx.type === 'Buy';
                    const date = new Date(tx.date).toLocaleString();
                    
                    transactionItem.innerHTML = `
                        <div class="d-flex justify-content-between align-items-center">
                            <div class="d-flex align-items-center">
                                <div class="transaction-icon ${isBuy ? 'buy' : 'sell'}">
                                    <i class="fas fa-arrow-${isBuy ? 'down' : 'up'}"></i>
                                </div>
                                <div>
                                    <h6 class="mb-0">${isBuy ? 'Bought' : 'Sold'} ${tx.cryptocurrency.split(' ')[0]}</h6>
                                    <small class="text-muted">${date}</small>
                                </div>
                            </div>
                            <div class="text-end">
                                <h6 class="mb-0">${isBuy ? '+' : '-'}${tx.amount} ${tx.symbol}</h6>
                                <small class="${isBuy ? 'text-success' : 'text-danger'}">$${tx.totalPrice.toFixed(2)}</small>
                            </div>
                        </div>
                    `;
                // If user not found in database, redirect to login
                alert('User not found. Please log in again.');
                localStorage.removeItem('token');
                window.location.href = 'login.html';
                return;
            }
            
            // Display user email in welcome message
            document.getElementById('userEmail').textContent = currentUser.email;
            
            // Fetch cryptocurrency prices
            fetchCryptoPrices();
        } catch (error) {
            console.error("Error fetching user details:", error);
            alert("An error occurred while loading user data. Please try again.");
        }
    }
    
    // Fetch real-time cryptocurrency prices
    async function fetchCryptoPrices() {
        try {
            const response = await fetch('https://api.coingecko.com/api/v3/simple/price?ids=bitcoin,ethereum,ripple,litecoin,cardano,polkadot,solana&vs_currencies=usd&include_24hr_change=true');
            const data = await response.json();
            
            // Store prices in global variable
            cryptoPrices = {
                'Bitcoin': { price: data.bitcoin.usd, change: data.bitcoin.usd_24h_change },
                'Ethereum': { price: data.ethereum.usd, change: data.ethereum.usd_24h_change },
                'Ripple': { price: data.ripple.usd, change: data.ripple.usd_24h_change },
                'Litecoin': { price: data.litecoin.usd, change: data.litecoin.usd_24h_change },
                'Cardano': { price: data.cardano.usd, change: data.cardano.usd_24h_change },
                'Polkadot': { price: data.polkadot.usd, change: data.polkadot.usd_24h_change },
                'Solana': { price: data.solana.usd, change: data.solana.usd_24h_change }
            };
            
            // Update cryptocurrency cards with real-time prices
            updateCryptoCards();
        } catch (error) {
            console.error('Error fetching cryptocurrency prices:', error);
            // Use fallback prices if API fails
            cryptoPrices = {
                'Bitcoin': { price: 38245.67, change: 2.5 },
                'Ethereum': { price: 2567.89, change: 1.8 },
                'Ripple': { price: 0.5678, change: -0.9 },
                'Litecoin': { price: 145.67, change: 0.7 },
                'Cardano': { price: 1.23, change: 3.2 },
                'Polkadot': { price: 18.45, change: -1.5 },
                'Solana': { price: 98.76, change: 4.3 }
            };
            updateCryptoCards();
        }
    }

    // Function to update cryptocurrency cards with real-time prices
    function updateCryptoCards() {
        const cryptoCards = document.querySelectorAll('.crypto-card');
        
        cryptoCards.forEach(card => {
            const cryptoName = card.getAttribute('data-crypto');
            const priceElement = card.querySelector('.crypto-price');
            const changeElement = card.querySelector('.crypto-price-change');
            
            if (cryptoPrices[cryptoName]) {
                const price = cryptoPrices[cryptoName].price;
                const change = cryptoPrices[cryptoName].change;
                
                // Update price
                priceElement.textContent = `$${price.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`;
                
                // Update price change
                changeElement.textContent = `${change >= 0 ? '+' : ''}${change.toFixed(2)}%`;
                changeElement.classList.remove('positive', 'negative');
                changeElement.classList.add(change >= 0 ? 'positive' : 'negative');
            }
        });
    }
    

    
    // Document ready event handler
    document.addEventListener("DOMContentLoaded", function() {
        // Add event listeners
        document.getElementById("walletButton").addEventListener("click", function() {
            document.getElementById("walletModal").style.display = "flex";
            fetchWallet();
        });

        document.getElementById("closeWallet").addEventListener("click", function() {
            document.getElementById("walletModal").style.display = "none";
        });

        document.getElementById("closeWalletButton").addEventListener("click", function() {
            document.getElementById("walletModal").style.display = "none";
        });
        
        document.getElementById("logoutButton").addEventListener("click", function() {
            const confirmModal = new bootstrap.Modal(document.getElementById("confirmLogoutModal"));
            confirmModal.show();
        });

        document.getElementById("confirmLogoutButton").addEventListener("click", function() {
            const confirmModal = bootstrap.Modal.getInstance(document.getElementById("confirmLogoutModal"));
            confirmModal.hide();
            logout();
        });
        
        // Create a style element for compatibility
        const style = document.createElement('style');
        style.textContent = `
            header h1,
            .wallet-header h3,
            .header-logo i {
                background-clip: text;
            }
        `;
        document.head.appendChild(style);
        
        // Add Font Awesome litecoin-sign icon if it doesn't exist
        if (!document.querySelector('.fa-litecoin-sign')) {
            const style = document.createElement('style');
            style.innerHTML = `
                .fa-litecoin-sign:before {
                    content: "\f3fa";
                }
            `;
            document.head.appendChild(style);
        }
        
        // Initialize
        fetchUserDetails();
        
        // Initialize AOS
        AOS.init({
            duration: 800,
            easing: 'ease-in-out',
            once: true
        });
    });
    </script>
</body>
</html>
